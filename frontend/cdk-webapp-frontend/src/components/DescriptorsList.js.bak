import React, { useState, useEffect } from 'react';
import { Card, Table, Form, InputGroup, Button, Spinner, Alert, Tabs, Tab } from 'react-bootstrap';
import axios from 'axios';

// Get backend URL from environment variable or use API proxy for local development
const API_BASE_URL = process.env.REACT_APP_BACKEND_URL || '/api';

// Descriptor categories based on package structure
const DESCRIPTOR_CATEGORIES = {
  'atomic': 'Atomic Properties',
  'atompair': 'Atom Pair Properties',
  'bond': 'Bond Properties',
  'topology': 'Topological Properties',
  'fragment': 'Fragment-based',
  'protein': 'Protein-related',
  'geometric': 'Geometric Properties',
  'electronic': 'Electronic Properties',
  'constitutional': 'Constitutional Properties',
  'fingerprint': 'Fingerprint-based',
  'molecular': 'Molecular Properties',
  'qsar': 'QSAR Properties',
  'other': 'Other Descriptors'
};

function DescriptorsList() {
  const [descriptors, setDescriptors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState('name');
  const [sortDirection, setSortDirection] = useState('asc');
  const [activeCategory, setActiveCategory] = useState('all');

  useEffect(() => {
    const fetchDescriptors = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`${API_BASE_URL}/molecules/descriptors`);
        setDescriptors(response.data);
        setError('');
      } catch (err) {
        console.error('Error fetching descriptors:', err);
        setError('Failed to load descriptors. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchDescriptors();
  }, []);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSort = (field) => {
    if (sortField === field) {
      // Toggle direction if clicking on the same field
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // Default to ascending for new sort field
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (field) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? '↑' : '↓';
  };

  const filteredAndSortedDescriptors = descriptors
    .filter(descriptor => 
      (searchTerm === '' || 
        descriptor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        descriptor.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (descriptor.description && descriptor.description.toLowerCase().includes(searchTerm.toLowerCase()))
      ) && 
      (activeCategory === 'all' || getCategoryForDescriptor(descriptor) === activeCategory)
    )
    .sort((a, b) => {
      const valA = a[sortField]?.toLowerCase() || '';
      const valB = b[sortField]?.toLowerCase() || '';
      
      if (sortDirection === 'asc') {
        return valA.localeCompare(valB);
      } else {
        return valB.localeCompare(valA);
      }
    });
    
  // Function to determine category based on descriptor ID
  const getCategoryForDescriptor = (descriptor) => {
    const id = descriptor.id.toLowerCase();
    
    for (const [key, _] of Object.entries(DESCRIPTOR_CATEGORIES)) {
      if (id.includes(key)) {
        return key;
      }
    }
    
    return 'other';
  };
  
  // Group descriptors by category
  const getDescriptorsByCategory = () => {
    const categories = {};
    
    descriptors.forEach(descriptor => {
      const category = getCategoryForDescriptor(descriptor);
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(descriptor);
    });
    
    return categories;
  };

  return (
    <Card className="mt-4">
      <Card.Header as="h5">Available CDK Descriptors (v2.11) - Total: {descriptors.length}</Card.Header>
      <Card.Body>
        <p className="text-muted mb-3">
          The Chemistry Development Kit (CDK) provides a wide range of molecular descriptors
          that can be used to characterize chemical structures. This list shows all descriptors available
          in CDK version 2.11.
        </p>
        
        <Form className="mb-3">
          <InputGroup>
            <Form.Control
              type="text"
              placeholder="Search descriptors..."
              value={searchTerm}
              onChange={handleSearchChange}
            />
            {searchTerm && (
              <Button 
                variant="outline-secondary" 
                onClick={() => setSearchTerm('')}
              >
                Clear
              </Button>
            )}
          </InputGroup>
        </Form>

        {loading ? (
          <div className="text-center p-3">
            <Spinner animation="border" role="status">
              <span className="visually-hidden">Loading...</span>
            </Spinner>
            <p className="mt-2">Loading descriptors...</p>
          </div>
        ) : error ? (
          <Alert variant="danger">{error}</Alert>
        ) : (
          <>
            <p className="text-muted mb-2">
              Found {filteredAndSortedDescriptors.length} descriptors
              {searchTerm && ` matching "${searchTerm}"`}
              {activeCategory !== 'all' && ` in category "${DESCRIPTOR_CATEGORIES[activeCategory]}"`}
            </p>
            
            <Tabs
              activeKey={activeCategory}
              onSelect={(k) => setActiveCategory(k)}
              className="mb-3"
            >
              <Tab eventKey="all" title={`All (${descriptors.length})`} />
              {Object.entries(getDescriptorsByCategory()).map(([category, categoryDescriptors]) => (
                <Tab 
                  key={category} 
                  eventKey={category} 
                  title={`${DESCRIPTOR_CATEGORIES[category] || category} (${categoryDescriptors.length})`} 
                />
              ))}
            </Tabs>

            <Table striped bordered hover responsive>
              <thead>
                <tr>
                  <th 
                    style={{cursor: 'pointer'}} 
                    onClick={() => handleSort('name')}
                  >
                    Name {getSortIcon('name')}
                  </th>
                  <th 
                    style={{cursor: 'pointer'}} 
                    onClick={() => handleSort('id')}
                  >
                    Descriptor ID {getSortIcon('id')}
                  </th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                {filteredAndSortedDescriptors.map((descriptor, index) => (
                  <tr key={index}>
                    <td><strong>{descriptor.name}</strong></td>
                    <td><code>{descriptor.id.split('.').pop()}</code></td>
                    <td>{descriptor.description !== descriptor.id ? descriptor.description : "Molecular descriptor from CDK"}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </>
        )}
      </Card.Body>
    </Card>
  );
}

export default DescriptorsList;
