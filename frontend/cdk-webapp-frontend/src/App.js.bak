import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Form, Button, Card, Table, Alert, Spinner, Tabs, Tab, Dropdown, Badge } from 'react-bootstrap';
import axios from 'axios';
import './App.css';
import SampleMolecules from './components/SampleMolecules';
import DescriptorsList from './components/DescriptorsList';

// Get backend URL from environment variable or use API proxy for local development
const API_BASE_URL = process.env.REACT_APP_BACKEND_URL || '/api';

// Descriptor categories for grouping
const DESCRIPTOR_CATEGORIES = {
  "Constitutional": ["AtomCount", "BondCount", "AromBondCount", "RotatableBondsCount", "MolecularWeight", "FractionalCSP3", "HeavyAtomCount", "XLogP"],
  "Topological": ["WienerNumbers", "ZagrebIndex", "TPSADescriptor", "MomentOfInertia", "PetitjeanNumber", "KappaShapeIndices"],
  "Electronic": ["IPMolecularLearning", "AtomHybridizationDescriptor", "ElectronDensity"],
  "Geometrical": ["MomentOfInertia", "WHIM", "CPSA", "GravitationalIndex"],
  "Fragment": ["KierHallSmarts", "MACCSFingerprinter", "SubstructureFingerprinter"], 
  "Quantum": ["QEDWeighted", "ProtonTautomerGenerator"],
  "Others": []
};

// Function to determine descriptor category
const getDescriptorCategory = (descriptor) => {
  const id = descriptor.id.split('.').pop();
  
  for (const [category, descriptors] of Object.entries(DESCRIPTOR_CATEGORIES)) {
    if (descriptors.some(desc => id.includes(desc))) {
      return category;
    }
  }
  return "Others";
};

function App() {
  const [smiles, setSmiles] = useState('');
  const [molecule, setMolecule] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [apiAvailable, setApiAvailable] = useState(true);
  const [activeTab, setActiveTab] = useState('molecule');
  const [descriptorSearchTerm, setDescriptorSearchTerm] = useState('');
  const [descriptorCategory, setDescriptorCategory] = useState('All');
  const [descriptorSortBy, setDescriptorSortBy] = useState('name');
  const [descriptorSortDir, setDescriptorSortDir] = useState('asc');

  // Check if API is available on component mount
  useEffect(() => {
    const checkApiStatus = async () => {
      try {
        // Try to ping the backend API
        await axios.get(`${API_BASE_URL}/molecules/health`, { timeout: 3000 });
        if (!apiAvailable) {
          console.log('Backend API is now available');
        }
        setApiAvailable(true);
      } catch (err) {
        console.error('API health check failed:', err);
        setApiAvailable(false);
      }
    };
    
    checkApiStatus();
    // Periodically check API availability
    const interval = setInterval(checkApiStatus, 10000);
    return () => clearInterval(interval);
  }, [apiAvailable]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!smiles.trim()) {
      setError('Please enter a SMILES string');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post(`${API_BASE_URL}/molecules/parse`, { smiles });
      setMolecule(response.data);
      setApiAvailable(true);
    } catch (err) {
      console.error('Error parsing molecule:', err);
      setError('Error processing molecule. Please check the SMILES string and try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSmilesChange = (e) => {
    setSmiles(e.target.value);
    setError('');
  };

  const renderMoleculeDetails = () => {
    if (!molecule) return null;

    // Group descriptors by category
    const descriptorsByCategory = {
      'All': molecule.descriptors
    };

    molecule.descriptors.forEach(descriptor => {
      const category = getDescriptorCategory(descriptor);
      if (!descriptorsByCategory[category]) {
        descriptorsByCategory[category] = [];
      }
      descriptorsByCategory[category].push(descriptor);
    });

    // Get the list of descriptors according to the selected category
    const activeDescriptors = descriptorCategory === 'All' 
      ? molecule.descriptors 
      : descriptorsByCategory[descriptorCategory] || [];
    
    // Filter descriptors based on search term
    const filteredDescriptors = activeDescriptors.filter(descriptor => 
      !descriptorSearchTerm || 
      descriptor.name.toLowerCase().includes(descriptorSearchTerm.toLowerCase()) ||
      (descriptor.description && descriptor.description.toLowerCase().includes(descriptorSearchTerm.toLowerCase()))
    );

    // Sort descriptors
    const sortedDescriptors = [...filteredDescriptors].sort((a, b) => {
      let valA, valB;
      
      if (descriptorSortBy === 'name') {
        valA = a.name.toLowerCase();
        valB = b.name.toLowerCase();
      } else if (descriptorSortBy === 'value') {
        // Try to sort numerically if possible
        const numA = parseFloat(a.value);
        const numB = parseFloat(b.value);
        if (!isNaN(numA) && !isNaN(numB)) {
          return descriptorSortDir === 'asc' ? numA - numB : numB - numA;
        }
        valA = a.value.toLowerCase();
        valB = b.value.toLowerCase();
      }
      
      return descriptorSortDir === 'asc' 
        ? valA.localeCompare(valB) 
        : valB.localeCompare(valA);
    });

    return (
      <Card className="mt-4">
        <Card.Header as="h5">Molecule Details</Card.Header>
        <Card.Body>
          <Row>
            <Col md={6}>
              <h6>2D Structure</h6>
              <div className="molecule-image">
                <img
                  src={`data:image/png;base64,${molecule.imageBase64}`}
                  alt="Molecule structure"
                  className="img-fluid"
                />
              </div>
            </Col>
            <Col md={6}>
              <h6>SMILES</h6>
              <p className="molecule-data">{molecule.smiles}</p>
              
              <h6 className="mt-3">Chemical Descriptors</h6>
              <Row className="mb-2">
                <Col md={7}>
                  <Form.Control
                    type="text"
                    placeholder="Search descriptors..."
                    onChange={(e) => setDescriptorSearchTerm(e.target.value)}
                    value={descriptorSearchTerm}
                    size="sm"
                  />
                </Col>
                <Col md={5} className="d-flex justify-content-end">
                  <Dropdown className="me-2">
                    <Dropdown.Toggle variant="outline-secondary" size="sm">
                      {descriptorCategory} <Badge bg="info" pill>{filteredDescriptors.length}</Badge>
                    </Dropdown.Toggle>
                    <Dropdown.Menu>
                      <Dropdown.Item onClick={() => setDescriptorCategory('All')}>
                        All <Badge bg={descriptorCategory === 'All' ? 'primary' : 'secondary'} pill>{molecule.descriptors.length}</Badge>
                      </Dropdown.Item>
                      <Dropdown.Divider />
                      {Object.keys(descriptorsByCategory)
                        .filter(cat => cat !== 'All')
                        .sort()
                        .map(category => (
                          <Dropdown.Item 
                            key={category} 
                            onClick={() => setDescriptorCategory(category)}
                          >
                            {category} <Badge bg={descriptorCategory === category ? 'primary' : 'secondary'} pill>{descriptorsByCategory[category].length}</Badge>
                          </Dropdown.Item>
                        ))
                      }
                    </Dropdown.Menu>
                  </Dropdown>
                  <Dropdown>
                    <Dropdown.Toggle variant="outline-secondary" size="sm">
                      Sort: {descriptorSortBy} {descriptorSortDir === 'asc' ? '↑' : '↓'}
                    </Dropdown.Toggle>
                    <Dropdown.Menu>
                      <Dropdown.Item onClick={() => {
                        setDescriptorSortBy('name');
                        setDescriptorSortDir(descriptorSortDir === 'asc' ? 'desc' : 'asc');
                      }}>
                        {descriptorSortBy === 'name' && (descriptorSortDir === 'asc' ? '↑ ' : '↓ ')}Name
                      </Dropdown.Item>
                      <Dropdown.Item onClick={() => {
                        setDescriptorSortBy('value');
                        setDescriptorSortDir(descriptorSortDir === 'asc' ? 'desc' : 'asc');
                      }}>
                        {descriptorSortBy === 'value' && (descriptorSortDir === 'asc' ? '↑ ' : '↓ ')}Value
                      </Dropdown.Item>
                    </Dropdown.Menu>
                  </Dropdown>
                </Col>
              </Row>
              <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
                <Table striped bordered hover size="sm">
                  <thead style={{ position: 'sticky', top: 0, background: 'white' }}>
                    <tr>
                      <th onClick={() => {
                        setDescriptorSortBy('name');
                        setDescriptorSortDir(descriptorSortBy === 'name' ? (descriptorSortDir === 'asc' ? 'desc' : 'asc') : 'asc');
                      }} style={{ cursor: 'pointer' }}>
                        Descriptor {descriptorSortBy === 'name' && (descriptorSortDir === 'asc' ? '↑' : '↓')}
                      </th>
                      <th onClick={() => {
                        setDescriptorSortBy('value');
                        setDescriptorSortDir(descriptorSortBy === 'value' ? (descriptorSortDir === 'asc' ? 'desc' : 'asc') : 'asc');
                      }} style={{ cursor: 'pointer' }}>
                        Value {descriptorSortBy === 'value' && (descriptorSortDir === 'asc' ? '↑' : '↓')}
                      </th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    {sortedDescriptors.map((descriptor, index) => (
                      <tr key={index}>
                        <td>
                          <strong>{descriptor.name}</strong>
                          <div className="small text-muted">
                            {descriptor.id.split('.').pop()}
                          </div>
                        </td>
                        <td>{descriptor.value}</td>
                        <td>{descriptor.description}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>
              </div>
            </Col>
          </Row>
          
          <h6 className="mt-3">MDL Molfile</h6>
          <pre className="molfile-display">
            {molecule.molfile}
          </pre>
        </Card.Body>
      </Card>
    );
  };
  };

  return (
    <Container className="py-4">
      <h1 className="text-center mb-4">CDK Cheminformatics Web App</h1>
      
      <Tabs 
        activeKey={activeTab}
        onSelect={(k) => setActiveTab(k)}
        className="mb-3"
      >
        <Tab eventKey="molecule" title="Analyze Molecule">
          {!apiAvailable && (
            <Alert variant="warning" className="mt-3">
              Backend API is not available. Please ensure the backend server is running.
            </Alert>
          )}
          
          <Card>
            <Card.Header as="h5">Molecule Input</Card.Header>
            <Card.Body>
              <Form onSubmit={handleSubmit}>
                <Form.Group controlId="smilesInput">
                  <Form.Label>SMILES String</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Enter SMILES (e.g., CC(=O)OC1=CC=CC=C1C(=O)O for Aspirin)"
                    value={smiles}
                    onChange={handleSmilesChange}
                  />
                  <Form.Text className="text-muted">
                    Enter a valid SMILES notation for a chemical structure.
                  </Form.Text>
                </Form.Group>
                
                <SampleMolecules onSelectMolecule={(smilesStr) => setSmiles(smilesStr)} />
                
                <Button 
                  variant="primary" 
                  type="submit" 
                  className="mt-3"
                  disabled={loading || !apiAvailable}
                >
                  {loading ? (
                    <>
                      <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                      <span className="ms-2">Processing...</span>
                    </>
                  ) : (
                    'Analyze Molecule'
                  )}
                </Button>
              </Form>
              
              {error && (
                <Alert variant="danger" className="mt-3">
                  {error}
                </Alert>
              )}
            </Card.Body>
          </Card>
          
          {renderMoleculeDetails()}
        </Tab>
        
        <Tab eventKey="descriptors" title="Available Descriptors">
          <DescriptorsList />
        </Tab>
      </Tabs>
      
      <footer className="text-center mt-5 text-muted">
        <p>Built with Spring Boot, Chemistry Development Kit (CDK v2.11), and React</p>
      </footer>
    </Container>
  );
}

export default App;
